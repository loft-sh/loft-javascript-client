/**
 * Api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: master
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { V1Affinity } from '../models/V1Affinity';
import { V1Container } from '../models/V1Container';
import { V1HostAlias } from '../models/V1HostAlias';
import { V1LocalObjectReference } from '../models/V1LocalObjectReference';
import { V1PodDNSConfig } from '../models/V1PodDNSConfig';
import { V1PodOS } from '../models/V1PodOS';
import { V1PodReadinessGate } from '../models/V1PodReadinessGate';
import { V1PodResourceClaim } from '../models/V1PodResourceClaim';
import { V1PodSchedulingGate } from '../models/V1PodSchedulingGate';
import { V1PodSecurityContext } from '../models/V1PodSecurityContext';
import { V1ResourceRequirements } from '../models/V1ResourceRequirements';
import { V1Toleration } from '../models/V1Toleration';
import { V1TopologySpreadConstraint } from '../models/V1TopologySpreadConstraint';
import { V1Volume } from '../models/V1Volume';


/**
* DevPodWorkspacePodTemplateSpec is a less restrictive PodSpec
*/
export class StorageV1DevPodWorkspacePodTemplateSpec {
    /**
    * Optional duration in seconds the pod may be active on the node relative to
    */
    'activeDeadlineSeconds'?: number;
    'affinity'?: V1Affinity;
    /**
    * AutomountServiceAccountToken indicates whether a service account token should be automatically mounted.
    */
    'automountServiceAccountToken'?: boolean;
    /**
    * List of containers belonging to the pod.
    */
    'containers'?: Array<V1Container>;
    'dnsConfig'?: V1PodDNSConfig;
    /**
    * Set DNS policy for the pod.  Possible enum values:  - `\"ClusterFirst\"` indicates that the pod should use cluster DNS first unless hostNetwork is true, if it is available, then fall back on the default (as determined by kubelet) DNS settings.  - `\"ClusterFirstWithHostNet\"` indicates that the pod should use cluster DNS first, if it is available, then fall back on the default (as determined by kubelet) DNS settings.  - `\"Default\"` indicates that the pod should use the default (as determined by kubelet) DNS settings.  - `\"None\"` indicates that the pod should use empty DNS settings. DNS parameters such as nameservers and search paths should be defined via DNSConfig.
    */
    'dnsPolicy'?: StorageV1DevPodWorkspacePodTemplateSpecDnsPolicyEnum;
    /**
    * EnableServiceLinks indicates whether information about services should be injected into pod\'s environment variables, matching the syntax of Docker links.
    */
    'enableServiceLinks'?: boolean;
    /**
    * HostAliases is an optional list of hosts and IPs that will be injected into the pod\'s hosts
    */
    'hostAliases'?: Array<V1HostAlias>;
    /**
    * Use the host\'s ipc namespace.
    */
    'hostIPC'?: boolean;
    /**
    * Host networking requested for this pod. Use the host\'s network namespace.
    */
    'hostNetwork'?: boolean;
    /**
    * Use the host\'s pid namespace.
    */
    'hostPID'?: boolean;
    /**
    * Use the host\'s user namespace.
    */
    'hostUsers'?: boolean;
    /**
    * Specifies the hostname of the Pod
    */
    'hostname'?: string;
    /**
    * ImagePullSecrets is an optional list of references to secrets in the same namespace to use for pulling any of the images used by this PodSpec.
    */
    'imagePullSecrets'?: Array<V1LocalObjectReference>;
    /**
    * List of initialization containers belonging to the pod.
    */
    'initContainers'?: Array<V1Container>;
    /**
    * NodeName indicates in which node this pod is scheduled.
    */
    'nodeName'?: string;
    /**
    * NodeSelector is a selector which must be true for the pod to fit on a node.
    */
    'nodeSelector'?: { [key: string]: string; };
    'os'?: V1PodOS;
    /**
    * Overhead represents the resource overhead associated with running a pod for a given RuntimeClass.
    */
    'overhead'?: { [key: string]: string; };
    /**
    * PreemptionPolicy is the Policy for preempting pods with lower priority.  Possible enum values:  - `\"Never\"` means that pod never preempts other pods with lower priority.  - `\"PreemptLowerPriority\"` means that pod can preempt other pods with lower priority.
    */
    'preemptionPolicy'?: StorageV1DevPodWorkspacePodTemplateSpecPreemptionPolicyEnum;
    'priority'?: number;
    /**
    * If specified, indicates the pod\'s priority.
    */
    'priorityClassName'?: string;
    /**
    * If specified, all readiness gates will be evaluated for pod readiness.
    */
    'readinessGates'?: Array<V1PodReadinessGate>;
    /**
    * ResourceClaims defines which ResourceClaims must be allocated and reserved before the Pod is allowed to start. The resources will be made available to those containers which consume them by name.
    */
    'resourceClaims'?: Array<V1PodResourceClaim>;
    'resources'?: V1ResourceRequirements;
    /**
    * Restart policy for all containers within the pod.  Possible enum values:  - `\"Always\"`  - `\"Never\"`  - `\"OnFailure\"`
    */
    'restartPolicy'?: StorageV1DevPodWorkspacePodTemplateSpecRestartPolicyEnum;
    /**
    * RuntimeClassName refers to a RuntimeClass object in the node.k8s.io group, which should be used to run this pod
    */
    'runtimeClassName'?: string;
    /**
    * If specified, the pod will be dispatched by specified scheduler. If not specified, the pod will be dispatched by default scheduler.
    */
    'schedulerName'?: string;
    /**
    * SchedulingGates is an opaque list of values that if specified will block scheduling the pod. If schedulingGates is not empty, the pod will stay in the SchedulingGated state and the scheduler will not attempt to schedule the pod.
    */
    'schedulingGates'?: Array<V1PodSchedulingGate>;
    'securityContext'?: V1PodSecurityContext;
    /**
    * ServiceAccountName is the name of the ServiceAccount to use to run this pod.
    */
    'serviceAccountName'?: string;
    /**
    * If true the pod\'s hostname will be configured as the pod\'s FQDN, rather than the leaf name (the default). In Linux containers, this means setting the FQDN in the hostname field of the kernel (the nodename field of struct utsname). In Windows containers, this means setting the registry value of hostname for the registry key HKEY_LOCAL_MACHINE\\\\SYSTEM\\\\CurrentControlSet\\\\Services\\\\Tcpip\\\\Parameters to FQDN.
    */
    'setHostnameAsFQDN'?: boolean;
    /**
    * Share a single process namespace between all of the containers in a pod.
    */
    'shareProcessNamespace'?: boolean;
    /**
    * If specified, the fully qualified Pod hostname will be \"<hostname>.<subdomain>.<pod namespace>.svc.<cluster domain>\".
    */
    'subdomain'?: string;
    /**
    * Optional duration in seconds the pod needs to terminate gracefully. May be decreased in delete request.
    */
    'terminationGracePeriodSeconds'?: number;
    /**
    * If specified, the pod\'s tolerations.
    */
    'tolerations'?: Array<V1Toleration>;
    /**
    * TopologySpreadConstraints describes how a group of pods ought to spread across topology domains.
    */
    'topologySpreadConstraints'?: Array<V1TopologySpreadConstraint>;
    /**
    * List of volumes that can be mounted by containers belonging to the pod.
    */
    'volumes'?: Array<V1Volume>;

    static readonly discriminator: string | undefined = undefined;

    static readonly attributeTypeMap: Array<{name: string, baseName: string, type: string, format: string}> = [
        {
            "name": "activeDeadlineSeconds",
            "baseName": "activeDeadlineSeconds",
            "type": "number",
            "format": "int64"
        },
        {
            "name": "affinity",
            "baseName": "affinity",
            "type": "V1Affinity",
            "format": ""
        },
        {
            "name": "automountServiceAccountToken",
            "baseName": "automountServiceAccountToken",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "containers",
            "baseName": "containers",
            "type": "Array<V1Container>",
            "format": ""
        },
        {
            "name": "dnsConfig",
            "baseName": "dnsConfig",
            "type": "V1PodDNSConfig",
            "format": ""
        },
        {
            "name": "dnsPolicy",
            "baseName": "dnsPolicy",
            "type": "StorageV1DevPodWorkspacePodTemplateSpecDnsPolicyEnum",
            "format": ""
        },
        {
            "name": "enableServiceLinks",
            "baseName": "enableServiceLinks",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "hostAliases",
            "baseName": "hostAliases",
            "type": "Array<V1HostAlias>",
            "format": ""
        },
        {
            "name": "hostIPC",
            "baseName": "hostIPC",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "hostNetwork",
            "baseName": "hostNetwork",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "hostPID",
            "baseName": "hostPID",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "hostUsers",
            "baseName": "hostUsers",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "hostname",
            "baseName": "hostname",
            "type": "string",
            "format": ""
        },
        {
            "name": "imagePullSecrets",
            "baseName": "imagePullSecrets",
            "type": "Array<V1LocalObjectReference>",
            "format": ""
        },
        {
            "name": "initContainers",
            "baseName": "initContainers",
            "type": "Array<V1Container>",
            "format": ""
        },
        {
            "name": "nodeName",
            "baseName": "nodeName",
            "type": "string",
            "format": ""
        },
        {
            "name": "nodeSelector",
            "baseName": "nodeSelector",
            "type": "{ [key: string]: string; }",
            "format": ""
        },
        {
            "name": "os",
            "baseName": "os",
            "type": "V1PodOS",
            "format": ""
        },
        {
            "name": "overhead",
            "baseName": "overhead",
            "type": "{ [key: string]: string; }",
            "format": ""
        },
        {
            "name": "preemptionPolicy",
            "baseName": "preemptionPolicy",
            "type": "StorageV1DevPodWorkspacePodTemplateSpecPreemptionPolicyEnum",
            "format": ""
        },
        {
            "name": "priority",
            "baseName": "priority",
            "type": "number",
            "format": "int32"
        },
        {
            "name": "priorityClassName",
            "baseName": "priorityClassName",
            "type": "string",
            "format": ""
        },
        {
            "name": "readinessGates",
            "baseName": "readinessGates",
            "type": "Array<V1PodReadinessGate>",
            "format": ""
        },
        {
            "name": "resourceClaims",
            "baseName": "resourceClaims",
            "type": "Array<V1PodResourceClaim>",
            "format": ""
        },
        {
            "name": "resources",
            "baseName": "resources",
            "type": "V1ResourceRequirements",
            "format": ""
        },
        {
            "name": "restartPolicy",
            "baseName": "restartPolicy",
            "type": "StorageV1DevPodWorkspacePodTemplateSpecRestartPolicyEnum",
            "format": ""
        },
        {
            "name": "runtimeClassName",
            "baseName": "runtimeClassName",
            "type": "string",
            "format": ""
        },
        {
            "name": "schedulerName",
            "baseName": "schedulerName",
            "type": "string",
            "format": ""
        },
        {
            "name": "schedulingGates",
            "baseName": "schedulingGates",
            "type": "Array<V1PodSchedulingGate>",
            "format": ""
        },
        {
            "name": "securityContext",
            "baseName": "securityContext",
            "type": "V1PodSecurityContext",
            "format": ""
        },
        {
            "name": "serviceAccountName",
            "baseName": "serviceAccountName",
            "type": "string",
            "format": ""
        },
        {
            "name": "setHostnameAsFQDN",
            "baseName": "setHostnameAsFQDN",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "shareProcessNamespace",
            "baseName": "shareProcessNamespace",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "subdomain",
            "baseName": "subdomain",
            "type": "string",
            "format": ""
        },
        {
            "name": "terminationGracePeriodSeconds",
            "baseName": "terminationGracePeriodSeconds",
            "type": "number",
            "format": "int64"
        },
        {
            "name": "tolerations",
            "baseName": "tolerations",
            "type": "Array<V1Toleration>",
            "format": ""
        },
        {
            "name": "topologySpreadConstraints",
            "baseName": "topologySpreadConstraints",
            "type": "Array<V1TopologySpreadConstraint>",
            "format": ""
        },
        {
            "name": "volumes",
            "baseName": "volumes",
            "type": "Array<V1Volume>",
            "format": ""
        }    ];

    static getAttributeTypeMap() {
        return StorageV1DevPodWorkspacePodTemplateSpec.attributeTypeMap;
    }

    public constructor() {
    }
}


export enum StorageV1DevPodWorkspacePodTemplateSpecDnsPolicyEnum {
    ClusterFirst = 'ClusterFirst',
    ClusterFirstWithHostNet = 'ClusterFirstWithHostNet',
    Default = 'Default',
    None = 'None'
}
export enum StorageV1DevPodWorkspacePodTemplateSpecPreemptionPolicyEnum {
    Never = 'Never',
    PreemptLowerPriority = 'PreemptLowerPriority'
}
export enum StorageV1DevPodWorkspacePodTemplateSpecRestartPolicyEnum {
    Always = 'Always',
    Never = 'Never',
    OnFailure = 'OnFailure'
}

