/**
 * Api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: master
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



export class ClusterV1SleepModeConfigSpec {
    /**
    * DeleteAfter specifies after how many seconds of inactivity the space should be deleted
    */
    'deleteAfter'?: number;
    /**
    * If force sleep is true the space will sleep
    */
    'forceSleep'?: boolean;
    /**
    * If force sleep duration is set, this will force the space to sleep for the given duration. It also implies that forceSleep is true. During this period loft will also block certain requests to that space. If this is set to 0, it means the space will sleep until it is manually woken up via the cli or ui.
    */
    'forceSleepDuration'?: number;
    /**
    * IgnoreActiveConnections ignores active connections on the namespace
    */
    'ignoreActiveConnections'?: boolean;
    /**
    * IgnoreAll ignores all requests
    */
    'ignoreAll'?: boolean;
    /**
    * IgnoreGroups are ignored user groups
    */
    'ignoreGroups'?: string;
    /**
    * IgnoreIngresses ignores all ingresses
    */
    'ignoreIngresses'?: boolean;
    /**
    * IgnoreResourceNames are ignored resources and names
    */
    'ignoreResourceNames'?: string;
    /**
    * IgnoreResourceVerbs are ignored resource verbs
    */
    'ignoreResourceVerbs'?: string;
    /**
    * IgnoreResources are ignored request resources
    */
    'ignoreResources'?: string;
    /**
    * IgnoreUseragents are ignored user agents with trailing wildcards \'*\' allowed. comma separated
    */
    'ignoreUserAgents'?: string;
    /**
    * IgnoreVClusters ignores vcluster requests
    */
    'ignoreVClusters'?: boolean;
    /**
    * IgnoreVerbs are ignored request verbs
    */
    'ignoreVerbs'?: string;
    /**
    * SleepAfter specifies after how many seconds of inactivity the space should sleep
    */
    'sleepAfter'?: number;
    /**
    * SleepSchedule specifies scheduled space sleep in Cron format, see https://en.wikipedia.org/wiki/Cron. Note: timezone defined in the schedule string will be ignored. Use \".Spec.Timezone\" field instead.
    */
    'sleepSchedule'?: string;
    /**
    * Timezone specifies time zone used for scheduled space operations. Defaults to UTC. Accepts the same format as time.LoadLocation() in Go (https://pkg.go.dev/time#LoadLocation). The value should be a location name corresponding to a file in the IANA Time Zone database, such as \"America/New_York\". See also: https://en.wikipedia.org/wiki/List_of_tz_database_time_zones
    */
    'timezone'?: string;
    /**
    * WakeupSchedule specifies scheduled wakeup from sleep in Cron format, see https://en.wikipedia.org/wiki/Cron. Note: timezone defined in the schedule string will be ignored. Use \".Spec.Timezone\" field instead.
    */
    'wakeupSchedule'?: string;

    static readonly discriminator: string | undefined = undefined;

    static readonly attributeTypeMap: Array<{name: string, baseName: string, type: string, format: string}> = [
        {
            "name": "deleteAfter",
            "baseName": "deleteAfter",
            "type": "number",
            "format": "int64"
        },
        {
            "name": "forceSleep",
            "baseName": "forceSleep",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "forceSleepDuration",
            "baseName": "forceSleepDuration",
            "type": "number",
            "format": "int64"
        },
        {
            "name": "ignoreActiveConnections",
            "baseName": "ignoreActiveConnections",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "ignoreAll",
            "baseName": "ignoreAll",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "ignoreGroups",
            "baseName": "ignoreGroups",
            "type": "string",
            "format": ""
        },
        {
            "name": "ignoreIngresses",
            "baseName": "ignoreIngresses",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "ignoreResourceNames",
            "baseName": "ignoreResourceNames",
            "type": "string",
            "format": ""
        },
        {
            "name": "ignoreResourceVerbs",
            "baseName": "ignoreResourceVerbs",
            "type": "string",
            "format": ""
        },
        {
            "name": "ignoreResources",
            "baseName": "ignoreResources",
            "type": "string",
            "format": ""
        },
        {
            "name": "ignoreUserAgents",
            "baseName": "ignoreUserAgents",
            "type": "string",
            "format": ""
        },
        {
            "name": "ignoreVClusters",
            "baseName": "ignoreVClusters",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "ignoreVerbs",
            "baseName": "ignoreVerbs",
            "type": "string",
            "format": ""
        },
        {
            "name": "sleepAfter",
            "baseName": "sleepAfter",
            "type": "number",
            "format": "int64"
        },
        {
            "name": "sleepSchedule",
            "baseName": "sleepSchedule",
            "type": "string",
            "format": ""
        },
        {
            "name": "timezone",
            "baseName": "timezone",
            "type": "string",
            "format": ""
        },
        {
            "name": "wakeupSchedule",
            "baseName": "wakeupSchedule",
            "type": "string",
            "format": ""
        }    ];

    static getAttributeTypeMap() {
        return ClusterV1SleepModeConfigSpec.attributeTypeMap;
    }

    public constructor() {
    }
}

