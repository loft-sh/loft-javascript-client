/**
 * Api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: master
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { StorageV1AccessKeyIdentity } from './storageV1AccessKeyIdentity';
import { StorageV1AccessKeyOIDC } from './storageV1AccessKeyOIDC';
import { StorageV1AccessKeyOIDCProvider } from './storageV1AccessKeyOIDCProvider';
import { StorageV1AccessKeyScope } from './storageV1AccessKeyScope';


export class ManagementV1OwnedAccessKeySpec {
    /**
    * Description describes an app
    */
    'description'?: string;
    /**
    * If this field is true, the access key is still allowed to exist, however will not work to access the api
    */
    'disabled'?: boolean;
    /**
    * The display name shown in the UI
    */
    'displayName'?: string;
    /**
    * Groups specifies extra groups to apply when using this access key
    */
    'groups'?: Array<string>;
    'identity'?: StorageV1AccessKeyIdentity;
    /**
    * The last time the identity was refreshed
    */
    'identityRefresh'?: Date;
    /**
    * The actual access key that will be used as a bearer token
    */
    'key'?: string;
    'oidcLogin'?: StorageV1AccessKeyOIDC;
    'oidcProvider'?: StorageV1AccessKeyOIDCProvider;
    /**
    * DEPRECATED: do not use anymore Parent is used to share OIDC and external token information with multiple access keys. Since copying an OIDC refresh token would result in the other access keys becoming invalid after a refresh parent allows access keys to share that information.  The use case for this is primarily user generated access keys, which will have the users current access key as parent if it contains an OIDC token.
    */
    'parent'?: string;
    'scope'?: StorageV1AccessKeyScope;
    /**
    * Subject is a generic subject that can be used instead of user or team
    */
    'subject'?: string;
    /**
    * The team this access key refers to
    */
    'team'?: string;
    /**
    * The time to life for this access key
    */
    'ttl'?: number;
    /**
    * If this is specified, the time to life for this access key will start after the lastActivity instead of creation timestamp
    */
    'ttlAfterLastActivity'?: boolean;
    /**
    * The type of an access key, which basically describes if the access key is user managed or managed by loft itself.
    */
    'type'?: string;
    /**
    * The user this access key refers to
    */
    'user'?: string;

    static readonly discriminator: string | undefined = undefined;

    static readonly attributeTypeMap: Array<{name: string, baseName: string, type: string, format: string}> = [
        {
            "name": "description",
            "baseName": "description",
            "type": "string",
            "format": ""
        },
        {
            "name": "disabled",
            "baseName": "disabled",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "displayName",
            "baseName": "displayName",
            "type": "string",
            "format": ""
        },
        {
            "name": "groups",
            "baseName": "groups",
            "type": "Array<string>",
            "format": ""
        },
        {
            "name": "identity",
            "baseName": "identity",
            "type": "StorageV1AccessKeyIdentity",
            "format": ""
        },
        {
            "name": "identityRefresh",
            "baseName": "identityRefresh",
            "type": "Date",
            "format": "date-time"
        },
        {
            "name": "key",
            "baseName": "key",
            "type": "string",
            "format": ""
        },
        {
            "name": "oidcLogin",
            "baseName": "oidcLogin",
            "type": "StorageV1AccessKeyOIDC",
            "format": ""
        },
        {
            "name": "oidcProvider",
            "baseName": "oidcProvider",
            "type": "StorageV1AccessKeyOIDCProvider",
            "format": ""
        },
        {
            "name": "parent",
            "baseName": "parent",
            "type": "string",
            "format": ""
        },
        {
            "name": "scope",
            "baseName": "scope",
            "type": "StorageV1AccessKeyScope",
            "format": ""
        },
        {
            "name": "subject",
            "baseName": "subject",
            "type": "string",
            "format": ""
        },
        {
            "name": "team",
            "baseName": "team",
            "type": "string",
            "format": ""
        },
        {
            "name": "ttl",
            "baseName": "ttl",
            "type": "number",
            "format": "int64"
        },
        {
            "name": "ttlAfterLastActivity",
            "baseName": "ttlAfterLastActivity",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "type",
            "baseName": "type",
            "type": "string",
            "format": ""
        },
        {
            "name": "user",
            "baseName": "user",
            "type": "string",
            "format": ""
        }    ];

    static getAttributeTypeMap() {
        return ManagementV1OwnedAccessKeySpec.attributeTypeMap;
    }

    public constructor() {
    }
}

