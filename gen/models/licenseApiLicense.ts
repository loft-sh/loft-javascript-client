/**
 * Api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: master
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { LicenseApiAnalytics } from '../models/licenseApiAnalytics';
import { LicenseApiAnnouncement } from '../models/licenseApiAnnouncement';
import { LicenseApiBlockRequest } from '../models/licenseApiBlockRequest';
import { LicenseApiButton } from '../models/licenseApiButton';
import { LicenseApiLicenseAPIRoutes } from '../models/licenseApiLicenseAPIRoutes';
import { LicenseApiModule } from '../models/licenseApiModule';
import { LicenseApiPlan } from '../models/licenseApiPlan';


/**
* License is a struct representing the license data sent to a Loft instance after checking in with the license server.
*/
export class LicenseApiLicense {
    'analytics'?: LicenseApiAnalytics;
    /**
    * Announcements is a map string/string such that we can easily add any additional data without needing to change types. For now, we will use the keys \"name\" and \"content\".
    */
    'announcement'?: Array<LicenseApiAnnouncement>;
    /**
    * BlockRequests specifies which requests the product should block when a limit is exceeded.
    */
    'block'?: Array<LicenseApiBlockRequest>;
    /**
    * Buttons is a slice of license server endpoints (buttons) that the Loft instance may need to hit. Each Button contains the display text and link for the front end to work with.
    */
    'buttons'?: Array<LicenseApiButton>;
    /**
    * DomainToken holds the JWT with the URL that the Loft instance is publicly available on. (via Loft router)
    */
    'domainToken'?: string;
    /**
    * InstanceID contains the instance id of the Loft instance
    */
    'instance'?: string;
    /**
    * IsOffline indicates if the license is an offline license or not.
    */
    'isOffline'?: boolean;
    /**
    * Modules is a list of modules.
    */
    'modules'?: Array<LicenseApiModule>;
    /**
    * Plans contains a list of plans
    */
    'plans'?: Array<LicenseApiPlan>;
    'routes'?: LicenseApiLicenseAPIRoutes;

    static readonly discriminator: string | undefined = undefined;

    static readonly attributeTypeMap: Array<{name: string, baseName: string, type: string, format: string}> = [
        {
            "name": "analytics",
            "baseName": "analytics",
            "type": "LicenseApiAnalytics",
            "format": ""
        },
        {
            "name": "announcement",
            "baseName": "announcement",
            "type": "Array<LicenseApiAnnouncement>",
            "format": ""
        },
        {
            "name": "block",
            "baseName": "block",
            "type": "Array<LicenseApiBlockRequest>",
            "format": ""
        },
        {
            "name": "buttons",
            "baseName": "buttons",
            "type": "Array<LicenseApiButton>",
            "format": ""
        },
        {
            "name": "domainToken",
            "baseName": "domainToken",
            "type": "string",
            "format": ""
        },
        {
            "name": "instance",
            "baseName": "instance",
            "type": "string",
            "format": ""
        },
        {
            "name": "isOffline",
            "baseName": "isOffline",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "modules",
            "baseName": "modules",
            "type": "Array<LicenseApiModule>",
            "format": ""
        },
        {
            "name": "plans",
            "baseName": "plans",
            "type": "Array<LicenseApiPlan>",
            "format": ""
        },
        {
            "name": "routes",
            "baseName": "routes",
            "type": "LicenseApiLicenseAPIRoutes",
            "format": ""
        }    ];

    static getAttributeTypeMap() {
        return LicenseApiLicense.attributeTypeMap;
    }

    public constructor() {
    }
}

