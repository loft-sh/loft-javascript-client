/**
 * Api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: master
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { StorageV1DevPodWorkspaceResourceRequirements } from '../models/storageV1DevPodWorkspaceResourceRequirements';
import { V1ContainerPort } from '../models/V1ContainerPort';
import { V1ContainerResizePolicy } from '../models/V1ContainerResizePolicy';
import { V1EnvFromSource } from '../models/V1EnvFromSource';
import { V1EnvVar } from '../models/V1EnvVar';
import { V1Lifecycle } from '../models/V1Lifecycle';
import { V1Probe } from '../models/V1Probe';
import { V1SecurityContext } from '../models/V1SecurityContext';
import { V1VolumeDevice } from '../models/V1VolumeDevice';
import { V1VolumeMount } from '../models/V1VolumeMount';


/**
* // DevPodWorkspacePodResourceRequirements is a less restrictive corev1.Container.
*/
export class StorageV1DevPodWorkspaceContainer {
    /**
    * Arguments to the entrypoint.
    */
    'args'?: Array<string>;
    /**
    * Entrypoint array. Not executed within a shell.
    */
    'command'?: Array<string>;
    /**
    * List of environment variables to set in the container.
    */
    'env'?: Array<V1EnvVar>;
    'envFrom'?: Array<V1EnvFromSource>;
    /**
    * Container image name.
    */
    'image'?: string;
    /**
    * Image pull policy.  Possible enum values:  - `\"Always\"` means that kubelet always attempts to pull the latest image. Container will fail If the pull fails.  - `\"IfNotPresent\"` means that kubelet pulls if the image isn\'t present on disk. Container will fail if the image isn\'t present and the pull fails.  - `\"Never\"` means that kubelet never pulls an image, but only uses a local image. Container will fail if the image isn\'t present
    */
    'imagePullPolicy'?: StorageV1DevPodWorkspaceContainerImagePullPolicyEnum;
    'lifecycle'?: V1Lifecycle;
    'livenessProbe'?: V1Probe;
    /**
    * Name of the container specified as a DNS_LABEL.
    */
    'name': string;
    /**
    * List of ports to expose from the container. Not specifying a port here
    */
    'ports'?: Array<V1ContainerPort>;
    'readinessProbe'?: V1Probe;
    /**
    * Resources resize policy for the container.
    */
    'resizePolicy'?: Array<V1ContainerResizePolicy>;
    'resources'?: StorageV1DevPodWorkspaceResourceRequirements;
    /**
    * RestartPolicy defines the restart behavior of individual containers in a pod.
    */
    'restartPolicy'?: string;
    'securityContext'?: V1SecurityContext;
    'startupProbe'?: V1Probe;
    /**
    * Whether this container should allocate a buffer for stdin in the container runtime.
    */
    'stdin'?: boolean;
    /**
    * StdinOnce default is false
    */
    'stdinOnce'?: boolean;
    /**
    * Optional: Path at which the file to which the container\'s termination message
    */
    'terminationMessagePath'?: string;
    /**
    * Indicate how the termination message should be populated. File will use the contents of  Possible enum values:  - `\"FallbackToLogsOnError\"` will read the most recent contents of the container logs for the container status message when the container exits with an error and the terminationMessagePath has no contents.  - `\"File\"` is the default behavior and will set the container status message to the contents of the container\'s terminationMessagePath when the container exits.
    */
    'terminationMessagePolicy'?: StorageV1DevPodWorkspaceContainerTerminationMessagePolicyEnum;
    /**
    * TTY default is false.
    */
    'tty'?: boolean;
    /**
    * volumeDevices is the list of block devices to be used by the container.
    */
    'volumeDevices'?: Array<V1VolumeDevice>;
    /**
    * Pod volumes to mount into the container\'s filesystem.
    */
    'volumeMounts'?: Array<V1VolumeMount>;
    /**
    * Container\'s working directory.
    */
    'workingDir'?: string;

    static readonly discriminator: string | undefined = undefined;

    static readonly attributeTypeMap: Array<{name: string, baseName: string, type: string, format: string}> = [
        {
            "name": "args",
            "baseName": "args",
            "type": "Array<string>",
            "format": ""
        },
        {
            "name": "command",
            "baseName": "command",
            "type": "Array<string>",
            "format": ""
        },
        {
            "name": "env",
            "baseName": "env",
            "type": "Array<V1EnvVar>",
            "format": ""
        },
        {
            "name": "envFrom",
            "baseName": "envFrom",
            "type": "Array<V1EnvFromSource>",
            "format": ""
        },
        {
            "name": "image",
            "baseName": "image",
            "type": "string",
            "format": ""
        },
        {
            "name": "imagePullPolicy",
            "baseName": "imagePullPolicy",
            "type": "StorageV1DevPodWorkspaceContainerImagePullPolicyEnum",
            "format": ""
        },
        {
            "name": "lifecycle",
            "baseName": "lifecycle",
            "type": "V1Lifecycle",
            "format": ""
        },
        {
            "name": "livenessProbe",
            "baseName": "livenessProbe",
            "type": "V1Probe",
            "format": ""
        },
        {
            "name": "name",
            "baseName": "name",
            "type": "string",
            "format": ""
        },
        {
            "name": "ports",
            "baseName": "ports",
            "type": "Array<V1ContainerPort>",
            "format": ""
        },
        {
            "name": "readinessProbe",
            "baseName": "readinessProbe",
            "type": "V1Probe",
            "format": ""
        },
        {
            "name": "resizePolicy",
            "baseName": "resizePolicy",
            "type": "Array<V1ContainerResizePolicy>",
            "format": ""
        },
        {
            "name": "resources",
            "baseName": "resources",
            "type": "StorageV1DevPodWorkspaceResourceRequirements",
            "format": ""
        },
        {
            "name": "restartPolicy",
            "baseName": "restartPolicy",
            "type": "string",
            "format": ""
        },
        {
            "name": "securityContext",
            "baseName": "securityContext",
            "type": "V1SecurityContext",
            "format": ""
        },
        {
            "name": "startupProbe",
            "baseName": "startupProbe",
            "type": "V1Probe",
            "format": ""
        },
        {
            "name": "stdin",
            "baseName": "stdin",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "stdinOnce",
            "baseName": "stdinOnce",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "terminationMessagePath",
            "baseName": "terminationMessagePath",
            "type": "string",
            "format": ""
        },
        {
            "name": "terminationMessagePolicy",
            "baseName": "terminationMessagePolicy",
            "type": "StorageV1DevPodWorkspaceContainerTerminationMessagePolicyEnum",
            "format": ""
        },
        {
            "name": "tty",
            "baseName": "tty",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "volumeDevices",
            "baseName": "volumeDevices",
            "type": "Array<V1VolumeDevice>",
            "format": ""
        },
        {
            "name": "volumeMounts",
            "baseName": "volumeMounts",
            "type": "Array<V1VolumeMount>",
            "format": ""
        },
        {
            "name": "workingDir",
            "baseName": "workingDir",
            "type": "string",
            "format": ""
        }    ];

    static getAttributeTypeMap() {
        return StorageV1DevPodWorkspaceContainer.attributeTypeMap;
    }

    public constructor() {
    }
}


export enum StorageV1DevPodWorkspaceContainerImagePullPolicyEnum {
    Always = 'Always',
    IfNotPresent = 'IfNotPresent',
    Never = 'Never'
}
export enum StorageV1DevPodWorkspaceContainerTerminationMessagePolicyEnum {
    FallbackToLogsOnError = 'FallbackToLogsOnError',
    File = 'File'
}

