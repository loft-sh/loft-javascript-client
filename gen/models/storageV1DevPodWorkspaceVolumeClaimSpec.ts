/**
 * Api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: master
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { StorageV1DevPodWorkspaceResourceRequirements } from '../models/storageV1DevPodWorkspaceResourceRequirements';
import { V1LabelSelector } from '../models/V1LabelSelector';
import { V1TypedLocalObjectReference } from '../models/V1TypedLocalObjectReference';
import { V1TypedObjectReference } from '../models/V1TypedObjectReference';


export class StorageV1DevPodWorkspaceVolumeClaimSpec {
    /**
    * accessModes contains the desired access modes the volume should have.
    */
    'accessModes'?: Array<StorageV1DevPodWorkspaceVolumeClaimSpecAccessModesEnum>;
    'dataSource'?: V1TypedLocalObjectReference;
    'dataSourceRef'?: V1TypedObjectReference;
    'resources'?: StorageV1DevPodWorkspaceResourceRequirements;
    'selector'?: V1LabelSelector;
    /**
    * storageClassName is the name of the StorageClass required by the claim.
    */
    'storageClassName'?: string;
    /**
    * volumeAttributesClassName may be used to set the VolumeAttributesClass used by this claim.
    */
    'volumeAttributesClassName'?: string;
    /**
    * volumeMode defines what type of volume is required by the claim.  Possible enum values:  - `\"Block\"` means the volume will not be formatted with a filesystem and will remain a raw block device.  - `\"Filesystem\"` means the volume will be or is formatted with a filesystem.
    */
    'volumeMode'?: StorageV1DevPodWorkspaceVolumeClaimSpecVolumeModeEnum;
    /**
    * volumeName is the binding reference to the PersistentVolume backing this claim.
    */
    'volumeName'?: string;

    static readonly discriminator: string | undefined = undefined;

    static readonly attributeTypeMap: Array<{name: string, baseName: string, type: string, format: string}> = [
        {
            "name": "accessModes",
            "baseName": "accessModes",
            "type": "Array<StorageV1DevPodWorkspaceVolumeClaimSpecAccessModesEnum>",
            "format": ""
        },
        {
            "name": "dataSource",
            "baseName": "dataSource",
            "type": "V1TypedLocalObjectReference",
            "format": ""
        },
        {
            "name": "dataSourceRef",
            "baseName": "dataSourceRef",
            "type": "V1TypedObjectReference",
            "format": ""
        },
        {
            "name": "resources",
            "baseName": "resources",
            "type": "StorageV1DevPodWorkspaceResourceRequirements",
            "format": ""
        },
        {
            "name": "selector",
            "baseName": "selector",
            "type": "V1LabelSelector",
            "format": ""
        },
        {
            "name": "storageClassName",
            "baseName": "storageClassName",
            "type": "string",
            "format": ""
        },
        {
            "name": "volumeAttributesClassName",
            "baseName": "volumeAttributesClassName",
            "type": "string",
            "format": ""
        },
        {
            "name": "volumeMode",
            "baseName": "volumeMode",
            "type": "StorageV1DevPodWorkspaceVolumeClaimSpecVolumeModeEnum",
            "format": ""
        },
        {
            "name": "volumeName",
            "baseName": "volumeName",
            "type": "string",
            "format": ""
        }    ];

    static getAttributeTypeMap() {
        return StorageV1DevPodWorkspaceVolumeClaimSpec.attributeTypeMap;
    }

    public constructor() {
    }
}


export enum StorageV1DevPodWorkspaceVolumeClaimSpecAccessModesEnum {
    ReadOnlyMany = 'ReadOnlyMany',
    ReadWriteMany = 'ReadWriteMany',
    ReadWriteOnce = 'ReadWriteOnce',
    ReadWriteOncePod = 'ReadWriteOncePod'
}
export enum StorageV1DevPodWorkspaceVolumeClaimSpecVolumeModeEnum {
    Block = 'Block',
    Filesystem = 'Filesystem'
}

